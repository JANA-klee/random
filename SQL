-- Insert non-domain related data into #ProfileData
-- Domain related data will be inserted into #ProfileData_DomainsOnly in the WHILE loop
INSERT INTO #ProfileData (ColumnNameId, TableCatalog, TableSchema, TableName, ColumnName)
SELECT ORDINAL_POSITION AS 'ColumnNameId', TABLE_CATALOG AS 'TableCatalog', TABLE_SCHEMA AS 'TableSchema', TABLE_NAME AS 'TableName', COLUMN_NAME AS 'ColumnName' 
from INFORMATION_SCHEMA.COLUMNS
where TABLE_CATALOG = @Table_Catalog AND TABLE_SCHEMA = @Table_Schema AND TABLE_NAME = @Table_Name; 

-- Get a count of total rows to process (just look at first column, i.e., column 0)
SELECT @RowCnt = COUNT(0) FROM #ProfileData;

-- Loop through columns in the dataset to determine their domains, the count of the domains, and the % total of the domain item relative to the rest in the column
-- @ColumnNameId start at 1 and loops until it reaches the value of @RowCnt
WHILE @ColumnNameId <= @RowCnt
BEGIN

   -- Setting column name based on the current @ColumnNameId
   SET @ColumnName = (SELECT ColumnName FROM #ProfileData WHERE ColumnNameId = @ColumnNameId);
   
   -- The @IsDate boolean variable indicates whether or not every entry in the column of interest is a data
   -- In other words, it answers "Is everything in this column a date?"
   -- It does this by:
   --     1. Checking if the entire column is full of only nulls; assigning a FALSE value if this condition is met
   --     2. Checking if all non-null entries in the column is only dates; assigning a TRUE value if this condition is met
   --     3. Every other case is set as FALSE
   SET @SQL =
   'SELECT @IsDate = 
    CASE 
		WHEN SUM(CASE WHEN [' + @ColumnName + '] IS NULL THEN 1 ELSE 0 END) = COUNT(*) THEN 0 
		WHEN SUM(ISDATE(CAST([' + @ColumnName + '] AS NVARCHAR))) = COUNT([' + @ColumnName + ']) THEN 1 
		ELSE 0 
		END  
    FROM [' + @Table_Catalog + '].[' + @Table_Schema + '].[' + @Table_Name + ']'

	-- @IsDate must be declared within this query's "subspace", it also must be declared as an output based on sp_executesql syntax
		EXEC sp_executesql @SQL, N'@IsDate BIT OUTPUT', @IsDate OUTPUT

   -- Obtaining a count of the number of unique domains in the column
   -- The string is executed with @DistinctCount as an output
   -- Dynamic SQL must be used in the cases where we are using a function to set a variable (?)
   SET @SQL =
   'SELECT @DistinctCount = COUNT(DISTINCT [' + @ColumnName + '] ) FROM [' + @Table_Catalog + '].[' + @Table_Schema + '].[' + @Table_Name + ']'
   
   -- @DistinctCount must be declared within this query's "subspace", it also must be declared as an output based on sp_executesql syntax
   EXEC sp_executesql @SQL, N'@DistinctCount int OUTPUT', @DistinctCount OUTPUT
 
   -- A print of the variables each loop so check if it is working


   -- If the number of unique domains is < 50, it will profile all the domains in the column
   -- Used to avoid situations where a lot of the domains are unique like Asset ID 
   -- In those cases, it would profile as many domains as there are assets, which is not useful 
      -- Main IF loop is based on the @IsDate condition which checks that everything in the column a date. 
   IF (@IsDate = 1)
	   BEGIN 
	  
	  -- If condition is satisfied, print out all the years from the date entries
	   SET @SQL = 
	   'INSERT INTO #ProfileData_DomainsOnly (ColumnNameId, DomainName, [Count], PercentTotal, NumberOfNulls, NumberOfEntries, UniquenessIndicator)
	   SELECT @ColumnNameId, 
	   year(try_parse(CAST([' + @ColumnName + '] AS NVARCHAR) as date using ''en-US'')), 
	   COUNT(*) AS "Count",
	   CAST(count(*) AS FLOAT) / CAST(sum(count(*)) over() AS FLOAT) AS "PercentTotal",
	   CASE WHEN year(try_parse(CAST([' + @ColumnName + '] AS NVARCHAR) as date using ''en-US'')) IS NULL THEN CAST(SUM(CASE WHEN year(try_parse(CAST([' + @ColumnName + '] AS NVARCHAR) as date using ''en-US'')) IS NULL THEN 1 ELSE 0 END) AS VARCHAR)
	   ELSE ''''
	   END AS "NumberOfNulls",
	   '''' AS "NumberOfEntries",
	   '''' AS "UniquenessIndicator"
	   FROM [' + @Table_Catalog + '].[' + @Table_Schema + '].[' + @Table_Name + ']
	   GROUP BY year(try_parse(CAST([' + @ColumnName + '] AS NVARCHAR) as date using ''en-US''))'

	   -- @ColumnNameId must be declared and set again within the dynamic SQL "subspace"
	   EXEC sp_executesql @SQL, N'@ColumnNameId INT', @ColumnNameId = @ColumnNameId

	   END
     
   ELSE 
		print(@DistinctCount)
		IF (@DistinctCount < 50)
			   BEGIN
			   		 
			   SET @SQL = 
			   'INSERT INTO #ProfileData_DomainsOnly (ColumnNameId, DomainName, [Count], PercentTotal, NumberOfNulls, NumberOfEntries, UniquenessIndicator)
			   SELECT 
					@ColumnNameId, 
					[' + @ColumnName +'], COUNT(*) AS "Count", 
					CAST(count(*) AS FLOAT) / CAST(sum(count(*)) over() AS FLOAT) AS "% Total",
					CASE WHEN [' + @ColumnName +'] IS NULL THEN CAST(SUM(CASE WHEN [' + @ColumnName +'] IS NULL THEN 1 ELSE 0 END) AS VARCHAR)
						 ELSE ''''
					     END AS "NumberOfNulls",
					'''' AS "NumberOfEntries",
					'' '' AS UniquenessIndicator
			   FROM [' + @Table_Catalog + '].[' + @Table_Schema + '].[' + @Table_Name + ']
			   GROUP BY [' + @ColumnName + ']'

			   -- @ColumnNameId must be declared and set again within the dynamic SQL "subspace"
			   EXEC sp_executesql @SQL, N'@ColumnNameId INT', @ColumnNameId = @ColumnNameId

			   END

		-- If the number of unique domains is > 50, it will give the column one row in the profiler table with the Domain Name 'UNIQUE' 
		-- to indicate that there are too many unique domains in the column
		ELSE
			   BEGIN

			   SET @SQL = 
			   'INSERT INTO #ProfileData_DomainsOnly (ColumnNameId, DomainName, [Count], PercentTotal, NumberOfNulls, NumberOfEntries, UniquenessIndicator)
			   SELECT 
				   @ColumnNameId,
				   ''MANY'', 
				   COUNT([' + @ColumnName +']) AS "Count", 1 AS "% Total",
				   SUM(CASE WHEN [' + @ColumnName +'] IS NULL THEN 1 ELSE 0 END) "NumberOfNulls",
			       COUNT([' + @ColumnName +']) "NumberOfEntries", 
				   CASE
					WHEN COUNT([' + @ColumnName +']) <> COUNT(DISTINCT[' + @ColumnName +']) THEN ''Entries are not UNIQUE''
					WHEN COUNT([' + @ColumnName +']) = COUNT(DISTINCT[' + @ColumnName +']) THEN ''Entries are UNIQUE''
					END AS UniquenessIndicator
			   FROM [' + @Table_Catalog + '].[' + @Table_Schema + '].[' + @Table_Name + ']'

			   EXEC sp_executesql @SQL, N'@ColumnNameId INT', @ColumnNameId = @ColumnNameId

			   END

   -- Move onto the next column
   SET @ColumnNameId = @ColumnNameId + 1 

END ;
